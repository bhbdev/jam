// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bhbdev/jam/models"
)

func newJobApp(db *gorm.DB, opts ...gen.DOOption) jobApp {
	_jobApp := jobApp{}

	_jobApp.jobAppDo.UseDB(db, opts...)
	_jobApp.jobAppDo.UseModel(&models.JobApp{})

	tableName := _jobApp.jobAppDo.TableName()
	_jobApp.ALL = field.NewAsterisk(tableName)
	_jobApp.ID = field.NewInt64(tableName, "id")
	_jobApp.CreatedAt = field.NewTime(tableName, "created_at")
	_jobApp.DeletedAt = field.NewField(tableName, "deleted_at")
	_jobApp.UpdatedAt = field.NewTime(tableName, "updated_at")
	_jobApp.Status = field.NewString(tableName, "status")
	_jobApp.Position = field.NewString(tableName, "position")
	_jobApp.Company = field.NewString(tableName, "company")
	_jobApp.DateApplied = field.NewTime(tableName, "date_applied")
	_jobApp.ResumeFile = field.NewString(tableName, "resume_file")
	_jobApp.Notes = field.NewString(tableName, "notes")

	_jobApp.fillFieldMap()

	return _jobApp
}

type jobApp struct {
	jobAppDo jobAppDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	DeletedAt   field.Field
	UpdatedAt   field.Time
	Status      field.String // status: applied, interview, offer, rejected, accepted
	Position    field.String // position applied for
	Company     field.String // company applied to
	DateApplied field.Time   // date applied
	ResumeFile  field.String // resume file - this will be a link to the file under cfg.UploadsDir
	Notes       field.String // notes

	fieldMap map[string]field.Expr
}

func (j jobApp) Table(newTableName string) *jobApp {
	j.jobAppDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobApp) As(alias string) *jobApp {
	j.jobAppDo.DO = *(j.jobAppDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobApp) updateTableName(table string) *jobApp {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewInt64(table, "id")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.DeletedAt = field.NewField(table, "deleted_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")
	j.Status = field.NewString(table, "status")
	j.Position = field.NewString(table, "position")
	j.Company = field.NewString(table, "company")
	j.DateApplied = field.NewTime(table, "date_applied")
	j.ResumeFile = field.NewString(table, "resume_file")
	j.Notes = field.NewString(table, "notes")

	j.fillFieldMap()

	return j
}

func (j *jobApp) WithContext(ctx context.Context) *jobAppDo { return j.jobAppDo.WithContext(ctx) }

func (j jobApp) TableName() string { return j.jobAppDo.TableName() }

func (j jobApp) Alias() string { return j.jobAppDo.Alias() }

func (j jobApp) Columns(cols ...field.Expr) gen.Columns { return j.jobAppDo.Columns(cols...) }

func (j *jobApp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobApp) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 10)
	j.fieldMap["id"] = j.ID
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["deleted_at"] = j.DeletedAt
	j.fieldMap["updated_at"] = j.UpdatedAt
	j.fieldMap["status"] = j.Status
	j.fieldMap["position"] = j.Position
	j.fieldMap["company"] = j.Company
	j.fieldMap["date_applied"] = j.DateApplied
	j.fieldMap["resume_file"] = j.ResumeFile
	j.fieldMap["notes"] = j.Notes
}

func (j jobApp) clone(db *gorm.DB) jobApp {
	j.jobAppDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobApp) replaceDB(db *gorm.DB) jobApp {
	j.jobAppDo.ReplaceDB(db)
	return j
}

type jobAppDo struct{ gen.DO }

// SELECT * FROM @@table WHERE id=@id
func (j jobAppDo) GetByID(id int) (result *models.JobApp, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM job_apps WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (j jobAppDo) Debug() *jobAppDo {
	return j.withDO(j.DO.Debug())
}

func (j jobAppDo) WithContext(ctx context.Context) *jobAppDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobAppDo) ReadDB() *jobAppDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobAppDo) WriteDB() *jobAppDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobAppDo) Session(config *gorm.Session) *jobAppDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobAppDo) Clauses(conds ...clause.Expression) *jobAppDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobAppDo) Returning(value interface{}, columns ...string) *jobAppDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobAppDo) Not(conds ...gen.Condition) *jobAppDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobAppDo) Or(conds ...gen.Condition) *jobAppDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobAppDo) Select(conds ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobAppDo) Where(conds ...gen.Condition) *jobAppDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobAppDo) Order(conds ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobAppDo) Distinct(cols ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobAppDo) Omit(cols ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobAppDo) Join(table schema.Tabler, on ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobAppDo) LeftJoin(table schema.Tabler, on ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobAppDo) RightJoin(table schema.Tabler, on ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobAppDo) Group(cols ...field.Expr) *jobAppDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobAppDo) Having(conds ...gen.Condition) *jobAppDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobAppDo) Limit(limit int) *jobAppDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobAppDo) Offset(offset int) *jobAppDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobAppDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *jobAppDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobAppDo) Unscoped() *jobAppDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobAppDo) Create(values ...*models.JobApp) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobAppDo) CreateInBatches(values []*models.JobApp, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobAppDo) Save(values ...*models.JobApp) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobAppDo) First() (*models.JobApp, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.JobApp), nil
	}
}

func (j jobAppDo) Take() (*models.JobApp, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.JobApp), nil
	}
}

func (j jobAppDo) Last() (*models.JobApp, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.JobApp), nil
	}
}

func (j jobAppDo) Find() ([]*models.JobApp, error) {
	result, err := j.DO.Find()
	return result.([]*models.JobApp), err
}

func (j jobAppDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.JobApp, err error) {
	buf := make([]*models.JobApp, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobAppDo) FindInBatches(result *[]*models.JobApp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobAppDo) Attrs(attrs ...field.AssignExpr) *jobAppDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobAppDo) Assign(attrs ...field.AssignExpr) *jobAppDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobAppDo) Joins(fields ...field.RelationField) *jobAppDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobAppDo) Preload(fields ...field.RelationField) *jobAppDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobAppDo) FirstOrInit() (*models.JobApp, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.JobApp), nil
	}
}

func (j jobAppDo) FirstOrCreate() (*models.JobApp, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.JobApp), nil
	}
}

func (j jobAppDo) FindByPage(offset int, limit int) (result []*models.JobApp, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobAppDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobAppDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobAppDo) Delete(models ...*models.JobApp) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobAppDo) withDO(do gen.Dao) *jobAppDo {
	j.DO = *do.(*gen.DO)
	return j
}
